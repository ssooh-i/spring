ex02_spring_annotation  -- Spring Legacy Project-->Simple Java (또는 Java Project)
                                                   프로젝트에서 오른쪽버튼->Configure->Convert to Maven Project선택    

pom.xml에 추가
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>5.3.18</version>
	</dependency>          
=======================================================================================                       
src
 anno01
    Food.java       
    FoodTest.java   --main
    MyFoodMgr.java  
    bean1.xml       -- Spring Bean Configuration File -> beans체크
    bean2.xml       -- Spring Bean Configuration File -> beans,p체크
    
  anno02
    Food.java
    FoodTest.java
    MyFoodMgr.java
    bean.xml        -- Spring Bean Configuration File  --> beans,context,p체크
                       
  anno03
  	Emp.java
  	Engineer.java
  	EmpTest.java
  	bean.xml    -- beans,context,p체크
                         
  anno04
     Car.java
     Tire.java        --interface
     KoreaTire.java
     DriverCar.java   --main
     bean.xml         --context, beans 추가
     
  anno05
      Student.java
      	-name:String
      	-address:String
      	-age:int
      	+setter
      	+toString():String
      		"Student [name=" + name + ", address=" + address + ", age=" + age + "]"
      		
      School.java
        +person:Student
        +grade:int
        +School()
        +School(person:Student)
        +toString():String
            "ABC고등학교 [학생정보=" + person.toString() + "학년=" + grade + "]"
            
      SchoolMain.java  --main
         School sh=(School)factory.getBean("mySchool");
		 System.out.println(sh.toString());
		 
      bean.xml         -- beans, context, p, c 선택   
       
      =출력=
      ABC고등학교[학생정보 = Student [name=홍길동, address=부산, age=19], 학년=3] 
       
   anno06
      LgTv.java
      SamsungTv.java
      Tv.java
      TvUser.java
      bean.xml   -- bean, context선택
------------------------------------------------------------------------------------
@Autowired :스프링 전용
1)의존관계를 자동으로 설정해주는 어노테이션: 
    Autowired 어노테이션이 붙은 인스턴스 변수는 해당 변수 타입과 일치하는 컨텍스트 내의 
       빈을 찾아 인스턴스 변수에 주입해 준다
2)타입을 이용하여 의존객체를 자동으로 설정한다(byType--> byName)
3)생성자, 필드(변수), 메서드 세곳에 적용가능하다
    의존성 주입을 위해선 생성자나 setter가 필요한데 이 어노테이션을 사용할 경우 없어도 가능하다.

@Resource  : 자바에서 지원 ,이름으로 연결(byName--> byType)
@Qualifier : 빈 객체중 특정빈을 사용하도록 선언
          ex)@Autowired는 메서드 앞에서 사용가능하다, 
                         다만 인젝션 가능한 형이 2개 이상이면 오류가 발생한다
                         이때 @Qualifier를 사용한다
@Inject  : 자바에서 지원 ,타입에 맞춰서 연결한다


ex)
<context:annotation-config></context:annotation-config>
@Autowired,  @Resource이용

<context:component-scan base-package=""/>  
=> 스프링은 클래스 패스에 위치한 클래스를 검색하여 특정한 어노테이션이 붙은 클래스를 자동으로
     빈으로 등록하는 기능을 제공
   * xml파일에 빈정보를 추가하지 않고도 특정한 클래스들의 빈을 등록할 수 있음

=> @Repository, @Component, @Controller, @Service 
     이들 어노테이션을 클래스 선언부분에 붙이고 xml설정파일에 <context:component-scan base-package="팩키지명" />
     태그를 추가하면 스프링은 지정한 팩키지에서 이 어노테이션이 적용된 클래스를 검색하여
     자동으로 빈으로 등록한다.

@Controller - Presentation Layer에서 Controller를 명시하기 위해서 사용
@Service - Business Layser에서 Service를 명시하기 위해서 사용
@Repository - Persistence Layer에서 DAO를 명시하기 위해서 사용
@Component - 그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용
                          해당 클래스를 자동으로 bean으로 등록
===========================================================
빈 객체 간의 의존관계를 설정 하기 위해 <property>를 통해서 설정
autowire=""를 이용
byName - 속성의 이름과 빈의 이름이 동일한 빈을 찾아서 해당 빈의 속성에 빈객체를 설정한다
byType - 속성의 타입과 빈의 타입이 동일한 빈을 찾아서 해당 빈의 속성에 빈객체를 설정한다
constructor - 생성자의 파라미터 타입과 동일한 타입의 빈을 찾아서 생성자의 파라미터에 설정한다
autodetect - 먼저 constructor 방식을 적용하고 실패한 경우에는 byType 식을 적용한다
no - (default)연결 안함

         
         
         
         
         
         
         
         